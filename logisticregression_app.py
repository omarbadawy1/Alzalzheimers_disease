# -*- coding: utf-8 -*-
"""logisticRegression_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B1iTpDXWWAA-sCW7Uz6h4xBoMeyJLo3N
"""



import streamlit as st
import numpy as np
import onnxruntime as ort

# Alzheimer‚Äôs feature list (must match training order exactly)
FEATURES = [
    'Age', 'Gender', 'Ethnicity', 'EducationLevel', 'BMI', 'Smoking', 'AlcoholConsumption',
    'PhysicalActivity', 'DietQuality', 'SleepQuality', 'FamilyHistoryAlzheimers',
    'CardiovascularDisease', 'Diabetes', 'Depression', 'HeadInjury', 'Hypertension',
    'SystolicBP', 'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',
    'CholesterolTriglycerides', 'MMSE', 'FunctionalAssessment', 'MemoryComplaints',
    'BehavioralProblems', 'ADL', 'Confusion', 'Disorientation', 'PersonalityChanges',
    'DifficultyCompletingTasks', 'Forgetfulness'
]

@st.cache_resource
def load_model():
    return ort.InferenceSession("alzheimers_pipeline.onnx", providers=['CPUExecutionProvider'])

session = load_model()

st.title("üß† Alzheimer's Disease Prediction")
st.write("Fill in the details below to get a prediction.")


user_data = []
for feature in FEATURES:
    value = st.number_input(f"{feature}", value=0.0)
    user_data.append(value)

if st.button("Predict"):
    try:

        input_array = np.array([user_data], dtype=np.float32)

        input_name = session.get_inputs()[0].name
        ort_inputs = {input_name: input_array}
        pred = session.run(None, ort_inputs)[0][0]

        if pred == 1:
            st.error("‚ö†Ô∏è High risk of Alzheimer's Disease.")
        else:
            st.success("‚úÖ Low risk of Alzheimer's Disease.")
    except Exception as e:
        st.error(f"Error: {e}")
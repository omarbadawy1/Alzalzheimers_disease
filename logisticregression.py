# -*- coding: utf-8 -*-
"""logisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17M39jbN5VkLBAA0QlNtHWHJdcXGoVhko
"""

!pip install onnxruntime
!pip install onnx
!pip install skl2onnx

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.pipeline import Pipeline
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
import onnxruntime as rt
# Load data
pima = pd.read_csv('/content/alzheimers_disease_data.csv')

# Features & target
features = ['Age', 'Gender', 'Ethnicity', 'EducationLevel', 'BMI', 'Smoking', 'AlcoholConsumption',
            'PhysicalActivity', 'DietQuality', 'SleepQuality', 'FamilyHistoryAlzheimers',
            'CardiovascularDisease', 'Diabetes', 'Depression', 'HeadInjury', 'Hypertension',
            'SystolicBP', 'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',
            'CholesterolTriglycerides', 'MMSE', 'FunctionalAssessment', 'MemoryComplaints',
            'BehavioralProblems', 'ADL', 'Confusion', 'Disorientation', 'PersonalityChanges',
            'DifficultyCompletingTasks', 'Forgetfulness']
X = pima[features]
y = pima['Diagnosis']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 3. Build pipeline (Scaler + Logistic Regression with L1)
pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('logreg', LogisticRegression(
        penalty='l1',
        solver='saga',
        C=1.0,
        max_iter=5000,
        random_state=42
    ))
])

# 4. Train
pipeline.fit(X_train, y_train)

# 5. Evaluate
y_pred = pipeline.predict(X_test)
print("Test Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# 6. Export to ONNX (scaler + model together)
initial_type = [('input', FloatTensorType([None, X_train.shape[1]]))]
onnx_model = convert_sklearn(pipeline, initial_types=initial_type)

with open("alzheimers_pipeline.onnx", "wb") as f:
    f.write(onnx_model.SerializeToString())

# 7. Test ONNXRuntime inference
sess = rt.InferenceSession("alzheimers_pipeline.onnx", providers=['CPUExecutionProvider'])
input_name = sess.get_inputs()[0].name

onnx_pred = sess.run(None, {input_name: X_test.astype(np.float32)})[0]
print("ONNX Runtime Accuracy:", accuracy_score(y_test, onnx_pred))